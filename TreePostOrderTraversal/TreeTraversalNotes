# RECURSION

All three algorithms are a depth-first type of an algorithm.

Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)
   
   
Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.
   
   
Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
   
   
   For a tree that looks like this:
   
   
   
		   	 1 (root)
			/ \
   		   2   3
  		  / \
		 4   5
 


Preorder traversal of binary tree is:
1 2 4 5 3 
Inorder traversal of binary tree is:
4 2 5 1 3 
Postorder traversal of binary tree is:
4 5 2 3 1
   
   
   


# ITERATION

1. Push root to first stack.
2. Loop while first stack is not empty
   2.1 Pop a node from first stack and push it to second stack
   2.2 Push left and right children of the popped node to first stack
3. Print contents of second stack



Sources:
https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder
https://www.geeksforgeeks.org/iterative-preorder-traversal/
https://www.youtube.com/watch?v=R4V4n-waxn4
