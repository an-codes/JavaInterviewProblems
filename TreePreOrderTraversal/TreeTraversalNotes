# RECURSION

All three algorithms are a depth-first type of an algorithm.

Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)
   
   
Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.
   
   
Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
   
   
   For a tree that looks like this:
   
   
   
		   	 1 (root)
			/ \
   		   2   3
  		  / \
		 4   5
 


Preorder traversal of binary tree is:
1 2 4 5 3 
Inorder traversal of binary tree is:
4 2 5 1 3 
Postorder traversal of binary tree is:
4 5 2 3 1
   
   
   


# ITERATION

1. Create an empty stack nodeStack and push root node to stack. 
2. Do the following while nodeStack is not empty: 
	1. Pop an item from the stack and print it. 
	2. Push right child of a popped item to stack 
	3. Push left child of a popped item to stack
	
	
The right child is pushed before the left child to make sure that the left subtree is processed first.




Sources:
https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder
https://www.geeksforgeeks.org/iterative-preorder-traversal/
https://www.youtube.com/watch?v=R4V4n-waxn4
