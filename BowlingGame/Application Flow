1. Okay, let's create a new Java Application
	- create BowlingGame.java
	- AND BowlingGameTest.java in JUnit 4
	
2. So let's consider what that application should be able to do:
 - Should be able to addPlayers (and store the players and their scores in possibly a HashMap)
 - Should be able to calculate the final score and consider the strike and spare 
 - Possibly Strike and Spare should be two separate methods that are called in the score calculation
 - It would be nice to printScores too
 - And it is mandatory to print a winner
 
3. Let's start with the addPlayers method
 - addPlayers will be for new players only which means it will store the name with score 0
 - create a HashMap that has String for a key - name and an Integer for the value - score
 - create addPlayer(String name) {}
 
4. Create finalScore method (that will be created from the throws)
 - We need to go player by player
 - In order to go player by player we need to have player's rolls save in another hashmap together with player's name
 - Create rollsTracker which is a hashmap with player's name and a integer array that stores their 
 - Create a function that goes over the input of rolls and adds each roll to the array
 - The array that keeps track of the rolls will be 21 as this is a max number of throws there can be if there are no strikes and the last move is a spare
 - Then that array is put onto the HashMap as a value that is appropriate for the Key
 - finalScore loops by the rollsTracker HashMap, by the name
 - THEN it loops by the array of the player's name
 - it loops by the frame with the total of 10 frames
 - checks for Strike (checks pair by pair)
 - checks for Spare
 - if no strike and no spare, just adds the points from index and index+1
 - it then takes the overall score and puts it on a HashMap with the name
 
 5. Create isStrike
  - takes the players rolls array (to ensure it is this exact player's) and the roll index
  - checks if a roll at index is 10 or not
 
 6. Create isSpare 
  - takes the players rolls array (to ensure it is this exact player's) and the roll index
  - checks if two consecutive rolls from this particular player's array add up to 10
  
 
 7. Create getWinner()
  - LOOP through a final score board, entry by entry
  - compare entry value to entry value
  - find entry with the top value
  - save that entry's value and key and print the winner annoucment
   
  
  
  
  
  